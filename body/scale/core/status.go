// Copyright 2017, Dawid Kurek, <dawikur@gmail.com>

package core

import (
	"bytes"
	"strconv"
	"syscall"

	"github.com/dawikur/dragon/body"
	"github.com/dawikur/dragon/config"
)

func getStatusMark(retVal int) body.Mark {
	if retVal == 0 {
		return config.Core.Status.OK
	}
	if retVal > 128 {
		return config.Core.Status.Signal
	}
	return config.Core.Status.Error
}

func getStatusContent(retVal int) string {
	if retVal <= 128 {
		switch (retVal) {
			case 1: return "1 [EPERM]"
			case 2: return "2 [ENOENT]"
			case 3: return "3 [ESRCH]"
			case 4: return "4 [EINTR]"
			case 5: return "5 [EIO]"
			case 6: return "6 [ENXIO]"
			case 7: return "7 [E2BIG]"
			case 8: return "8 [ENOEXEC]"
			case 9: return "9 [EBADF]"
			case 10: return "10 [ECHILD]"
			case 11: return "11 [EAGAIN]"
			case 12: return "12 [ENOMEM]"
			case 13: return "13 [EACCES]"
			case 14: return "14 [EFAULT]"
			case 15: return "15 [ENOTBLK]"
			case 16: return "16 [EBUSY]"
			case 17: return "17 [EEXIST]"
			case 18: return "18 [EXDEV]"
			case 19: return "19 [ENODEV]"
			case 20: return "20 [ENOTDIR]"
			case 21: return "21 [EISDIR]"
			case 22: return "22 [EINVAL]"
			case 23: return "23 [ENFILE]"
			case 24: return "24 [EMFILE]"
			case 25: return "25 [ENOTTY]"
			case 26: return "26 [ETXTBSY]"
			case 27: return "27 [EFBIG]"
			case 28: return "28 [ENOSPC]"
			case 29: return "29 [ESPIPE]"
			case 30: return "30 [EROFS]"
			case 31: return "31 [EMLINK]"
			case 32: return "32 [EPIPE]"
			case 33: return "33 [EDOM]"
			case 34: return "34 [ERANGE]"
			case 35: return "35 [EDEADLOCK]"
			case 36: return "36 [ENAMETOOLONG]"
			case 37: return "37 [ENOLCK]"
			case 38: return "38 [ENOSYS]"
			case 39: return "39 [ENOTEMPTY]"
			case 40: return "40 [ELOOP]"
			case 41: return "41 []"
			case 42: return "42 [ENOMSG]"
			case 43: return "43 [EIDRM]"
			case 44: return "44 [ECHRNG]"
			case 45: return "45 [EL2NSYNC]"
			case 46: return "46 [EL3HLT]"
			case 47: return "47 [EL3RST]"
			case 48: return "48 [ELNRNG]"
			case 49: return "49 [EUNATCH]"
			case 50: return "50 [ENOCSI]"
			case 51: return "51 [EL2HLT]"
			case 52: return "52 [EBADE]"
			case 53: return "53 [EBADR]"
			case 54: return "54 [EXFULL]"
			case 55: return "55 [ENOANO]"
			case 56: return "56 [EBADRQC]"
			case 57: return "57 [EBADSLT]"
			case 58: return "58 []"
			case 59: return "59 [EBFONT]"
			case 60: return "60 [ENOSTR]"
			case 61: return "61 [ENODATA]"
			case 62: return "62 [ETIME]"
			case 63: return "63 [ENOSR]"
			case 64: return "64 [ENONET]"
			case 65: return "65 [ENOPKG]"
			case 66: return "66 [EREMOTE]"
			case 67: return "67 [ENOLINK]"
			case 68: return "68 [EADV]"
			case 69: return "69 [ESRMNT]"
			case 70: return "70 [ECOMM]"
			case 71: return "71 [EPROTO]"
			case 72: return "72 [EMULTIHOP]"
			case 73: return "73 [EDOTDOT]"
			case 74: return "74 [EBADMSG]"
			case 75: return "75 [EOVERFLOW]"
			case 76: return "76 [ENOTUNIQ]"
			case 77: return "77 [EBADFD]"
			case 78: return "78 [EREMCHG]"
			case 79: return "79 [ELIBACC]"
			case 80: return "80 [ELIBBAD]"
			case 81: return "81 [ELIBSCN]"
			case 82: return "82 [ELIBMAX]"
			case 83: return "83 [ELIBEXEC]"
			case 84: return "84 [EILSEQ]"
			case 85: return "85 [ERESTART]"
			case 86: return "86 [ESTRPIPE]"
			case 87: return "87 [EUSERS]"
			case 88: return "88 [ENOTSOCK]"
			case 89: return "89 [EDESTADDRREQ]"
			case 90: return "90 [EMSGSIZE]"
			case 91: return "91 [EPROTOTYPE]"
			case 92: return "92 [ENOPROTOOPT]"
			case 93: return "93 [EPROTONOSUPPORT]"
			case 94: return "94 [ESOCKTNOSUPPORT]"
			case 95: return "95 [EOPNOTSUPP]"
			case 96: return "96 [EPFNOSUPPORT]"
			case 97: return "97 [EAFNOSUPPORT]"
			case 98: return "98 [EADDRINUSE]"
			case 99: return "99 [EADDRNOTAVAIL]"
			case 100: return "100 [ENETDOWN]"
			case 101: return "101 [ENETUNREACH]"
			case 102: return "102 [ENETRESET]"
			case 103: return "103 [ECONNABORTED]"
			case 104: return "104 [ECONNRESET]"
			case 105: return "105 [ENOBUFS]"
			case 106: return "106 [EISCONN]"
			case 107: return "107 [ENOTCONN]"
			case 108: return "108 [ESHUTDOWN]"
			case 109: return "109 [ETOOMANYREFS]"
			case 110: return "110 [ETIMEDOUT]"
			case 111: return "111 [ECONNREFUSED]"
			case 112: return "112 [EHOSTDOWN]"
			case 113: return "113 [EHOSTUNREACH]"
			case 114: return "114 [EALREADY]"
			case 115: return "115 [EINPROGRESS]"
			case 116: return "116 [ESTALE]"
			case 117: return "117 [EUCLEAN]"
			case 118: return "118 [ENOTNAM]"
			case 119: return "119 [ENAVAIL]"
			case 120: return "120 [EISNAM]"
			case 121: return "121 [EREMOTEIO]"
			case 122: return "122 [EDQUOT]"
			case 123: return "123 [ENOMEDIUM]"
			case 124: return "124 [EMEDIUMTYPE]"
			case 125: return "125 [ECANCELED]"
			case 126: return "126 [ENOKEY]"
			case 127: return "127 [EKEYEXPIRED]"
			case 128: return "128 [EKEYREVOKED]"
			case 129: return "129 [EKEYREJECTED]"
			case 130: return "130 [EOWNERDEAD]"
			case 131: return "131 [ENOTRECOVERABLE]"
			case 132: return "132 [ERFKILL]"
			case 133: return "133 [EHWPOISON]"
		}

		return strconv.Itoa(retVal)
	} else {
		switch (retVal - 128) {
			case 1: return "1 [SIGHUP]"
			case 2: return "2 [SIGINT]"
			case 3: return "3 [SIGQUIT]"
			case 4: return "4 [SIGILL]"
			case 5: return "5 [SIGTRAP]"
			case 6: return "6 [SIGABRT]"
			case 7: return "7 [SIGBUS]"
			case 8: return "8 [SIGFPE]"
			case 9: return "9 [SIGKILL]"
			case 10: return "10 [SIGUSR1]"
			case 11: return "11 [SIGSEGV]"
			case 12: return "12 [SIGUSR2]"
			case 13: return "13 [SIGPIPE]"
			case 14: return "14 [SIGALRM]"
			case 15: return "15 [SIGTERM]"
			case 16: return "16 [SIGSTKFLT]"
			case 17: return "17 [SIGCHLD]"
			case 18: return "18 [SIGCONT]"
			case 19: return "19 [SIGSTOP]"
			case 20: return "20 [SIGTSTP]"
			case 21: return "21 [SIGTTIN]"
			case 22: return "22 [SIGTTOU]"
			case 23: return "23 [SIGURG]"
			case 24: return "24 [SIGXCPU]"
			case 25: return "25 [SIGXFSZ]"
			case 26: return "26 [SIGVTALRM]"
			case 27: return "27 [SIGPROF]"
			case 28: return "28 [SIGWINCH]"
			case 29: return "29 [SIGIO]"
			case 30: return "30 [SIGPWR]"
			case 31: return "31 [SIGSYS]"
			case 34: return "34 [SIGRTMIN]"
			case 35: return "35 [SIGRTMIN+1]"
			case 36: return "36 [SIGRTMIN+2]"
			case 37: return "37 [SIGRTMIN+3]"
			case 38: return "38 [SIGRTMIN+4]"
			case 39: return "39 [SIGRTMIN+5]"
			case 40: return "40 [SIGRTMIN+6]"
			case 41: return "41 [SIGRTMIN+7]"
			case 42: return "42 [SIGRTMIN+8]"
			case 43: return "43 [SIGRTMIN+9]"
			case 44: return "44 [SIGRTMIN+10]"
			case 45: return "45 [SIGRTMIN+11]"
			case 46: return "46 [SIGRTMIN+12]"
			case 47: return "47 [SIGRTMIN+13]"
			case 48: return "48 [SIGRTMIN+14]"
			case 49: return "49 [SIGRTMIN+15]"
			case 50: return "50 [SIGRTMAX-14]"
			case 51: return "51 [SIGRTMAX-13]"
			case 52: return "52 [SIGRTMAX-12]"
			case 53: return "53 [SIGRTMAX-11]"
			case 54: return "54 [SIGRTMAX-10]"
			case 55: return "55 [SIGRTMAX-9]"
			case 56: return "56 [SIGRTMAX-8]"
			case 57: return "57 [SIGRTMAX-7]"
			case 58: return "58 [SIGRTMAX-6]"
			case 59: return "59 [SIGRTMAX-5]"
			case 60: return "60 [SIGRTMAX-4]"
			case 61: return "61 [SIGRTMAX-3]"
			case 62: return "62 [SIGRTMAX-2]"
			case 63: return "63 [SIGRTMAX-1]"
			case 64: return "64 [SIGRTMAX]"
		}

		return string(syscall.Signal(retVal - 128))
	}

	return strconv.Itoa(retVal)
}

func Status(retVal int) body.Scale {
	mark := getStatusMark(retVal)
	content := getStatusContent(retVal)

	return body.Scale{
		retVal != 0,
		config.Core.Status.Color,
		func(buffer *bytes.Buffer) {
			mark.Render(buffer)
			buffer.WriteRune(' ')
			buffer.WriteString(content)
		}}
}
